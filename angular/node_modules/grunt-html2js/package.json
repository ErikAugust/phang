{
  "name": "grunt-html2js",
  "description": "Compiles AngularJS templates to JavaScript",
  "version": "0.1.9",
  "homepage": "https://github.com/karlgoldstein/grunt-html2js",
  "author": {
    "name": "Karl Goldstein",
    "email": "karl.goldstein@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/karlgoldstein/grunt-html2js.git"
  },
  "bugs": {
    "url": "https://github.com/karlgoldstein/grunt-html2js/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/karlgoldstein/grunt-html2js/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-html2js\n\n> Converts AngularJS templates to JavaScript\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-html2js --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-html2js');\n```\n\n## The \"html2js\" task\n\n### Overview\n\nAngular-JS normally loads templates lazily from the server as you reference them in your application (via `ng-include`, routing configuration or other mechanism).  Angular caches the source code for each template so that subsequent references do not require another server request.  However, if your application is divided into many small components, then the initial loading process may involve an unacceptably large number of additional server requests.\n\nThis plugin converts a group of templates to JavaScript and assembles them into an Angular module that primes the cache directly when the module is loaded.  You can concatenate this module with your main application code so that Angular does not need to make any additional server requests to initialize the application.\n\nNote that this plugin does *not* compile the templates.  It simply caches the template source code.\n\n### Setup\n\nBy default, this plugin assumes you are following the naming conventions and build pipeline of the [angular-app][https://github.com/angular-app/angular-app] demo application.\n\nIn your project's Gruntfile, add a section named `html2js` to the data object passed into `grunt.initConfig()`.\n\nThis simplest configuration will assemble all templates in your src tree into a module named `templates-main`, and write the JavaScript source for the module to `tmp/template.js`:\n\n```js\ngrunt.initConfig({\n  html2js: {\n    options: {\n      // custom options, see below    \n    },\n    main: {\n      src: ['src/**/*.tpl.html'],\n      dest: 'tmp/templates.js'\n    },\n  },\n})\n```\n\nAssuming you concatenate the resulting file with the rest of your application code, you can then specify the module as a dependency in your code:\n\n```\nangular.module('main', ['templates-main'])\n  .config(['$routeProvider', function ($routeProvidear) {\n    $routeProvider.when('/somepath', {\n      templateUrl:'some/template.tpl.html',\n```\n\nNote that you should use relative paths to specify the template URL, to\nmatch the keys by which the template source is cached.\n\n### Gotchas\n\nThe `dest` property must be a string.  If it is an array, Grunt will fail when attempting to write the bundle file.\n\n### Options\n\n#### options.base\nType: `String`\nDefault value: `'src'`\n\nThe prefix relative to the project directory that should be stripped from each template path to produce a module identifier for the template.  For example, a template located at `src/projects/projects.tpl.html` would be identified as just `projects/projects.tpl.html`.\n\n#### options.target\nType: `String`\nDefault value: `'js'`\n\nLanguage of the output file. Possible values: `'coffee'`, `'js'`.\n\n#### options.module\nType: `String`\nDefault value: `templates-TARGET` \n\nThe name of the parent Angular module for each set of templates.  Defaults to the task target prefixed by `templates-`.\n\nIf no bundle module is desired, set this to false.\n\n#### options.rename\nType: `Function`\nDefault value: `none`\n\nA function that takes in the module identifier and returns the renamed module identifier to use instead for the template.  For example, a template located at `src/projects/projects.tpl.html` would be identified as `/src/projects/projects.tpl` with a rename function defined as:\n\n```\nfunction (moduleName) {\n  return '/' + moduleName.replace('.html', '');\n}\n```\n\n#### options.quoteChar\nType: `Character`\nDefault value: `\"`\n\nStrings are quoted with double-quotes by default.  However, for projects \nthat want strict single quote-only usage, you can specify:\n\n```\noptions: { quoteChar: '\\'' }\n```\n\nto use single quotes, or any other odd quoting character you want\n\n#### indentString\nType: `String`\nDefault value: `  `\n\nBy default a 2-space indent is used for the generated code. However,\nyou can specify alternate indenting via:\n\n```\noptions: { indentString: '    ' }\n```\n\nto get, for example, 4-space indents. Same goes for tabs or any other\nindent system you want to use.\n\n#### fileHeaderString: \nType: `String`\nDefault value: ``\n\nIf specified, this string  will get written at the top of the output\nTemplate.js file. As an example, jshint directives such as\n/* global angular: false */ can be put at the head of the file.\n\n#### fileFooterString: \nType: `String`\nDefault value: ``\n\nIf specified, this string  will get written at the end of the output\nfile.  May be used in conjunction with `fileHeaderString` to wrap\nthe output.\n\n#### useStrict: \nType: `Boolean`\nDefault value: ``\n\nIf set true, each module in JavaScript will have 'use strict'; written at the top of the\nmodule.  Useful for global strict jshint settings.\n\n```\noptions: { useStrict: true }\n```\n\n### Usage Examples\n\nSee the `Gruntfile.js` in the project source code for various configuration examples.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n0.1.1 Build module even if templates do not exist yet\n\n0.1.2 Preserve line feeds in templates to avoid breaking &lt;pre>-formatted text\n\n0.1.3 Add option to set the `module` option to null to disable creation of bundle module\n\n0.1.4 Add rename option\n\n0.1.5 Add config options for quoteChar, indentString and fileHeaderString (thanks @jonathana)\n\n0.1.6 Add support for CoffeeScript (thanks @srigi)\n\n0.1.7 Escape backslashes in template source (issue #11, thanks @JoakimBe)\n\n0.1.8 Add fileFooterString option (issue #13, thanks @duro)\n\n0.1.9 Add useStrict option (pull request #15, thanks @marcoose)",
  "readmeFilename": "README.md",
  "_id": "grunt-html2js@0.1.9",
  "_from": "grunt-html2js@~0.1.3"
}
